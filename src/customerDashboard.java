
import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.JViewport;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

class CustomHeaderRenderer extends DefaultTableCellRenderer {

    @Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        JLabel label = (JLabel) super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

        label.setBackground(Color.BLACK);
        label.setForeground(Color.WHITE);
        Font font = new Font("Times New Roman", Font.BOLD, 12);
        label.setFont(font);
        return label;
    }
}

public class customerDashboard extends javax.swing.JFrame {

    String name;
    static String id;

    public customerDashboard() {
        initComponents();
        userIDLabel.setText("USERID: " + id);
        Toolkit toolkit = getToolkit();
        Dimension size = toolkit.getScreenSize();
        setLocation(size.width / 2 - getWidth() / 2, size.height / 2 - getHeight() / 2);

        //Profile Panel
        profileTitleLabel.setVisible(false);
        customerIDLabel.setVisible(false);
        nameLabel.setVisible(false);
        emailLabel.setVisible(false);
        phoneLabel.setVisible(false);
        addressLabel.setVisible(false);
        changePasswordLabel.setVisible(false);
        changePassTextField.setVisible(false);
        changePassButton.setVisible(false);

        //MoviePanel
        moviescreeningLabel.setVisible(false);
        genericScrollPane1.setVisible(false);
        genericTable1.setVisible(false);

        for (int i = 0; i < genericTable1.getColumnCount(); i++) {
            TableColumn column = genericTable1.getColumnModel().getColumn(i);
            column.setHeaderRenderer(new CustomHeaderRenderer());
        }

        JViewport genericViewPort = genericScrollPane1.getViewport();
        genericViewPort.setBackground(Color.BLACK);

        //ShowtimePanel
        movieShowtimeLabel1.setVisible(false);
        genericScrollPane2.setVisible(false);
        genericTable2.setVisible(false);
        dateLabel.setVisible(false);
        showtimeComboBox.setVisible(false);

        for (int i = 0; i < genericTable2.getColumnCount(); i++) {
            TableColumn column = genericTable2.getColumnModel().getColumn(i);
            column.setHeaderRenderer(new CustomHeaderRenderer());
        }

        JViewport genericViewPort1 = genericScrollPane2.getViewport();
        genericViewPort1.setBackground(Color.BLACK);

        //Rating Panel
        movienameField.setVisible(false);
        reviewsField.setVisible(false);
        ratingSpinner.setVisible(false);
        submitreviewButton.setVisible(false);
        reviewsLabel.setVisible(false);
        ratingLabel1.setVisible(false);

        //History Panel
        ticketHistoryLabel.setVisible(false);
        genericScrollPane3.setVisible(false);
        genericTable3.setVisible(false);

        for (int i = 0; i < genericTable3.getColumnCount(); i++) {
            TableColumn column = genericTable3.getColumnModel().getColumn(i);
            column.setHeaderRenderer(new CustomHeaderRenderer());
        }

        JViewport genericViewPort2 = genericScrollPane3.getViewport();
        genericViewPort2.setBackground(Color.BLACK);

        searchmovieField.setVisible(false);
    }

    public customerDashboard(String id) {
        this.id = id;
    }

    private static void fillDateComboBox(JComboBox<String> comboBox) {
        // Get the current date
        Calendar calendar = Calendar.getInstance();
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

        for (int i = 0; i < 7; i++) {
            comboBox.addItem(dateFormat.format(calendar.getTime()));
            // Move to the next date
            calendar.add(Calendar.DAY_OF_MONTH, 1);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        rightsidePanel = new javax.swing.JPanel();
        Title = new javax.swing.JLabel();
        UserIDPanel = new javax.swing.JPanel();
        userIDLabel = new javax.swing.JLabel();
        profilePanel = new javax.swing.JPanel();
        profileLabel = new javax.swing.JLabel();
        profileiconLabel = new javax.swing.JLabel();
        moviePanel = new javax.swing.JPanel();
        movieLabel = new javax.swing.JLabel();
        movieiconLabel = new javax.swing.JLabel();
        showtimePanel = new javax.swing.JPanel();
        showtimeLabel = new javax.swing.JLabel();
        showtimeiconLabel = new javax.swing.JLabel();
        ratingPanel = new javax.swing.JPanel();
        ratingLabel = new javax.swing.JLabel();
        ratingIconLabel = new javax.swing.JLabel();
        historyPanel = new javax.swing.JPanel();
        historyLabel = new javax.swing.JLabel();
        historyiconLabel = new javax.swing.JLabel();
        logoutButton = new javax.swing.JButton();
        leftsidePanel = new javax.swing.JPanel();
        profileMainPanel = new javax.swing.JPanel();
        profileTitleLabel = new javax.swing.JLabel();
        customerIDLabel = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        emailLabel = new javax.swing.JLabel();
        phoneLabel = new javax.swing.JLabel();
        addressLabel = new javax.swing.JLabel();
        changePasswordLabel = new javax.swing.JLabel();
        changePassTextField = new javax.swing.JTextField();
        changePassButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        movieMainPanel = new javax.swing.JPanel();
        moviescreeningLabel = new javax.swing.JLabel();
        genericScrollPane1 = new javax.swing.JScrollPane();
        genericTable1 = new javax.swing.JTable();
        searchmovieField = new javax.swing.JTextField();
        showtimeMainPanel = new javax.swing.JPanel();
        movieShowtimeLabel1 = new javax.swing.JLabel();
        genericScrollPane2 = new javax.swing.JScrollPane();
        genericTable2 = new javax.swing.JTable();
        dateLabel = new javax.swing.JLabel();
        showtimeComboBox = new javax.swing.JComboBox<>();
        ratingMainPanel = new javax.swing.JPanel();
        ratingrevieLabel = new javax.swing.JLabel();
        movienameField = new javax.swing.JTextField();
        reviewsLabel = new javax.swing.JLabel();
        reviewsField = new javax.swing.JTextField();
        ratingLabel1 = new javax.swing.JLabel();
        ratingSpinner = new javax.swing.JSpinner();
        submitreviewButton = new javax.swing.JButton();
        historyMainPanel = new javax.swing.JPanel();
        ticketHistoryLabel = new javax.swing.JLabel();
        genericScrollPane3 = new javax.swing.JScrollPane();
        genericTable3 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        rightsidePanel.setBackground(new java.awt.Color(0, 0, 0));

        Title.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        Title.setForeground(new java.awt.Color(255, 255, 255));
        Title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Title.setText("QUANTUM CINEPLEX");

        UserIDPanel.setBackground(new java.awt.Color(255, 0, 0));

        userIDLabel.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        userIDLabel.setForeground(new java.awt.Color(255, 255, 255));
        userIDLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        userIDLabel.setText("USERID");

        javax.swing.GroupLayout UserIDPanelLayout = new javax.swing.GroupLayout(UserIDPanel);
        UserIDPanel.setLayout(UserIDPanelLayout);
        UserIDPanelLayout.setHorizontalGroup(
            UserIDPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(userIDLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)
        );
        UserIDPanelLayout.setVerticalGroup(
            UserIDPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(userIDLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
        );

        profilePanel.setBackground(new java.awt.Color(255, 255, 255));
        profilePanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                profilePanelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                profilePanelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                profilePanelMouseExited(evt);
            }
        });

        profileLabel.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        profileLabel.setText("PROFILE");
        profileLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                profileLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                profileLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                profileLabelMouseExited(evt);
            }
        });

        profileiconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icon-customer.png"))); // NOI18N
        profileiconLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                profileiconLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                profileiconLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                profileiconLabelMouseExited(evt);
            }
        });

        javax.swing.GroupLayout profilePanelLayout = new javax.swing.GroupLayout(profilePanel);
        profilePanel.setLayout(profilePanelLayout);
        profilePanelLayout.setHorizontalGroup(
            profilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, profilePanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(profileiconLabel)
                .addGap(63, 63, 63)
                .addComponent(profileLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        profilePanelLayout.setVerticalGroup(
            profilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(profileLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(profileiconLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        moviePanel.setBackground(new java.awt.Color(255, 255, 255));
        moviePanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                moviePanelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                moviePanelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                moviePanelMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                moviePanelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                moviePanelMouseReleased(evt);
            }
        });

        movieLabel.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        movieLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        movieLabel.setText("MOVIE");
        movieLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                movieLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                movieLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                movieLabelMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                movieLabelMousePressed(evt);
            }
        });

        movieiconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icon-movie.png"))); // NOI18N
        movieiconLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                movieiconLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                movieiconLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                movieiconLabelMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                movieiconLabelMousePressed(evt);
            }
        });

        javax.swing.GroupLayout moviePanelLayout = new javax.swing.GroupLayout(moviePanel);
        moviePanel.setLayout(moviePanelLayout);
        moviePanelLayout.setHorizontalGroup(
            moviePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(moviePanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(movieiconLabel)
                .addGap(53, 53, 53)
                .addComponent(movieLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(121, Short.MAX_VALUE))
        );
        moviePanelLayout.setVerticalGroup(
            moviePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(movieLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(movieiconLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        showtimePanel.setBackground(new java.awt.Color(255, 255, 255));
        showtimePanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showtimePanelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                showtimePanelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                showtimePanelMouseExited(evt);
            }
        });

        showtimeLabel.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        showtimeLabel.setText("SHOWTIME");
        showtimeLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showtimeLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                showtimeLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                showtimeLabelMouseExited(evt);
            }
        });

        showtimeiconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icon-showtime.png"))); // NOI18N
        showtimeiconLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showtimeiconLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                showtimeiconLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                showtimeiconLabelMouseExited(evt);
            }
        });

        javax.swing.GroupLayout showtimePanelLayout = new javax.swing.GroupLayout(showtimePanel);
        showtimePanel.setLayout(showtimePanelLayout);
        showtimePanelLayout.setHorizontalGroup(
            showtimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, showtimePanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(showtimeiconLabel)
                .addGap(54, 54, 54)
                .addComponent(showtimeLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        showtimePanelLayout.setVerticalGroup(
            showtimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, showtimePanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(showtimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(showtimeiconLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(showtimeLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        ratingPanel.setBackground(new java.awt.Color(255, 255, 255));
        ratingPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ratingPanelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                ratingPanelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                ratingPanelMouseExited(evt);
            }
        });

        ratingLabel.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        ratingLabel.setText("RATING & REVIEWS");
        ratingLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ratingLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                ratingLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                ratingLabelMouseExited(evt);
            }
        });

        ratingIconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icon-rating.png"))); // NOI18N
        ratingIconLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ratingIconLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                ratingIconLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                ratingIconLabelMouseExited(evt);
            }
        });

        javax.swing.GroupLayout ratingPanelLayout = new javax.swing.GroupLayout(ratingPanel);
        ratingPanel.setLayout(ratingPanelLayout);
        ratingPanelLayout.setHorizontalGroup(
            ratingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ratingPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(ratingIconLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(ratingLabel)
                .addGap(80, 80, 80))
        );
        ratingPanelLayout.setVerticalGroup(
            ratingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ratingLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(ratingIconLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        historyPanel.setBackground(new java.awt.Color(255, 255, 255));
        historyPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                historyPanelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                historyPanelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                historyPanelMouseExited(evt);
            }
        });

        historyLabel.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        historyLabel.setText("HISTORY");
        historyLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                historyLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                historyLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                historyLabelMouseExited(evt);
            }
        });

        historyiconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icon-history.png"))); // NOI18N
        historyiconLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                historyiconLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                historyiconLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                historyiconLabelMouseExited(evt);
            }
        });

        javax.swing.GroupLayout historyPanelLayout = new javax.swing.GroupLayout(historyPanel);
        historyPanel.setLayout(historyPanelLayout);
        historyPanelLayout.setHorizontalGroup(
            historyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(historyPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(historyiconLabel)
                .addGap(62, 62, 62)
                .addComponent(historyLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        historyPanelLayout.setVerticalGroup(
            historyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(historyLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(historyiconLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        logoutButton.setBackground(new java.awt.Color(204, 0, 0));
        logoutButton.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        logoutButton.setForeground(new java.awt.Color(255, 255, 255));
        logoutButton.setText("LOG OUT");
        logoutButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                logoutButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                logoutButtonMouseExited(evt);
            }
        });
        logoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout rightsidePanelLayout = new javax.swing.GroupLayout(rightsidePanel);
        rightsidePanel.setLayout(rightsidePanelLayout);
        rightsidePanelLayout.setHorizontalGroup(
            rightsidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(moviePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(profilePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(showtimePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(ratingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(historyPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(rightsidePanelLayout.createSequentialGroup()
                .addGroup(rightsidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(rightsidePanelLayout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(Title, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(rightsidePanelLayout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addComponent(logoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rightsidePanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(UserIDPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(68, 68, 68))
        );
        rightsidePanelLayout.setVerticalGroup(
            rightsidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightsidePanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(Title, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(UserIDPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(60, 60, 60)
                .addComponent(profilePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(moviePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(showtimePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(ratingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(historyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(logoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );

        leftsidePanel.setBackground(new java.awt.Color(0, 0, 0));

        profileMainPanel.setBackground(new java.awt.Color(0, 0, 0));

        profileTitleLabel.setBackground(new java.awt.Color(0, 0, 0));
        profileTitleLabel.setFont(new java.awt.Font("Engravers MT", 1, 24)); // NOI18N
        profileTitleLabel.setForeground(new java.awt.Color(255, 255, 255));
        profileTitleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        profileTitleLabel.setText("ACCOUNT INFORMATION");

        customerIDLabel.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        customerIDLabel.setForeground(new java.awt.Color(255, 255, 255));

        nameLabel.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        nameLabel.setForeground(new java.awt.Color(255, 255, 255));

        emailLabel.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        emailLabel.setForeground(new java.awt.Color(255, 255, 255));

        phoneLabel.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        phoneLabel.setForeground(new java.awt.Color(255, 255, 255));

        addressLabel.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        addressLabel.setForeground(new java.awt.Color(255, 255, 255));

        changePasswordLabel.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        changePasswordLabel.setForeground(new java.awt.Color(255, 255, 255));
        changePasswordLabel.setText("Reset Password?");
        changePasswordLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                changePasswordLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                changePasswordLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                changePasswordLabelMouseExited(evt);
            }
        });

        changePassTextField.setForeground(new java.awt.Color(204, 204, 204));
        changePassTextField.setText("New Password");
        changePassTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                changePassTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                changePassTextFieldFocusLost(evt);
            }
        });

        changePassButton.setBackground(new java.awt.Color(204, 0, 0));
        changePassButton.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 14)); // NOI18N
        changePassButton.setForeground(new java.awt.Color(255, 255, 255));
        changePassButton.setText("CHANGE");
        changePassButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                changePassButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                changePassButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                changePassButtonMouseExited(evt);
            }
        });
        changePassButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changePassButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("ID");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("NAME");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("EMAIL");

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("PHONE NO");

        javax.swing.GroupLayout profileMainPanelLayout = new javax.swing.GroupLayout(profileMainPanel);
        profileMainPanel.setLayout(profileMainPanelLayout);
        profileMainPanelLayout.setHorizontalGroup(
            profileMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(profileMainPanelLayout.createSequentialGroup()
                .addGap(92, 92, 92)
                .addGroup(profileMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, profileMainPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 89, Short.MAX_VALUE)
                        .addGroup(profileMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(profileTitleLabel)
                            .addGroup(profileMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(profileMainPanelLayout.createSequentialGroup()
                                    .addGroup(profileMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(profileMainPanelLayout.createSequentialGroup()
                                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(112, 112, 112))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, profileMainPanelLayout.createSequentialGroup()
                                            .addGroup(profileMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                    .addGroup(profileMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(addressLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(customerIDLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(emailLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(phoneLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(212, 212, 212))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, profileMainPanelLayout.createSequentialGroup()
                        .addGroup(profileMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(profileMainPanelLayout.createSequentialGroup()
                                .addGap(154, 154, 154)
                                .addComponent(changePasswordLabel)
                                .addGap(214, 214, 214))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, profileMainPanelLayout.createSequentialGroup()
                                .addComponent(changePassTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(35, 35, 35)
                                .addComponent(changePassButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(165, 165, 165))))
        );
        profileMainPanelLayout.setVerticalGroup(
            profileMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(profileMainPanelLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(profileTitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 92, Short.MAX_VALUE)
                .addGroup(profileMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customerIDLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(profileMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(profileMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emailLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(profileMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(phoneLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(addressLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(70, 70, 70)
                .addComponent(changePasswordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(profileMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(changePassTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(changePassButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(92, 92, 92))
        );

        movieMainPanel.setBackground(new java.awt.Color(0, 0, 0));

        moviescreeningLabel.setBackground(new java.awt.Color(0, 0, 0));
        moviescreeningLabel.setFont(new java.awt.Font("Engravers MT", 1, 24)); // NOI18N
        moviescreeningLabel.setForeground(new java.awt.Color(255, 255, 255));
        moviescreeningLabel.setText("MOVIES Screening");

        genericTable1.setBackground(new java.awt.Color(0, 0, 0));
        genericTable1.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        genericTable1.setForeground(new java.awt.Color(255, 255, 255));
        genericTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "MOVIE NAME", "PROD_CO", "GENRE", "LANGUAGE", "DURATION", "RELEASE DATE"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        genericTable1.setRowHeight(30);
        genericTable1.getTableHeader().setReorderingAllowed(false);
        genericScrollPane1.setViewportView(genericTable1);
        if (genericTable1.getColumnModel().getColumnCount() > 0) {
            genericTable1.getColumnModel().getColumn(0).setResizable(false);
            genericTable1.getColumnModel().getColumn(1).setResizable(false);
            genericTable1.getColumnModel().getColumn(2).setResizable(false);
            genericTable1.getColumnModel().getColumn(3).setResizable(false);
            genericTable1.getColumnModel().getColumn(3).setHeaderValue("START TIME");
            genericTable1.getColumnModel().getColumn(4).setHeaderValue("END TIME");
            genericTable1.getColumnModel().getColumn(5).setHeaderValue("DATE");
        }

        searchmovieField.setForeground(new java.awt.Color(128, 128, 128));
        searchmovieField.setText("Search Movie");
        searchmovieField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                searchmovieFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                searchmovieFieldFocusLost(evt);
            }
        });
        searchmovieField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchmovieFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchmovieFieldKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout movieMainPanelLayout = new javax.swing.GroupLayout(movieMainPanel);
        movieMainPanel.setLayout(movieMainPanelLayout);
        movieMainPanelLayout.setHorizontalGroup(
            movieMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, movieMainPanelLayout.createSequentialGroup()
                .addContainerGap(54, Short.MAX_VALUE)
                .addComponent(genericScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 770, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47))
            .addGroup(movieMainPanelLayout.createSequentialGroup()
                .addGroup(movieMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(movieMainPanelLayout.createSequentialGroup()
                        .addGap(265, 265, 265)
                        .addComponent(moviescreeningLabel))
                    .addGroup(movieMainPanelLayout.createSequentialGroup()
                        .addGap(225, 225, 225)
                        .addComponent(searchmovieField, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        movieMainPanelLayout.setVerticalGroup(
            movieMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(movieMainPanelLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(moviescreeningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(searchmovieField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addComponent(genericScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );

        showtimeMainPanel.setBackground(new java.awt.Color(0, 0, 0));

        movieShowtimeLabel1.setBackground(new java.awt.Color(0, 0, 0));
        movieShowtimeLabel1.setFont(new java.awt.Font("Engravers MT", 1, 24)); // NOI18N
        movieShowtimeLabel1.setForeground(new java.awt.Color(255, 255, 255));
        movieShowtimeLabel1.setText("Screen schedule");

        genericTable2.setBackground(new java.awt.Color(0, 0, 0));
        genericTable2.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        genericTable2.setForeground(new java.awt.Color(255, 255, 255));
        genericTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "SHOWTIME ID", "MOVIE NAME", "HALL NO", "START TIME", "END TIME", "DATE"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        genericTable2.setRowHeight(30);
        genericTable2.getTableHeader().setReorderingAllowed(false);
        genericScrollPane2.setViewportView(genericTable2);
        if (genericTable2.getColumnModel().getColumnCount() > 0) {
            genericTable2.getColumnModel().getColumn(0).setResizable(false);
            genericTable2.getColumnModel().getColumn(1).setResizable(false);
            genericTable2.getColumnModel().getColumn(2).setResizable(false);
            genericTable2.getColumnModel().getColumn(3).setResizable(false);
            genericTable2.getColumnModel().getColumn(3).setHeaderValue("START TIME");
            genericTable2.getColumnModel().getColumn(4).setHeaderValue("END TIME");
            genericTable2.getColumnModel().getColumn(5).setHeaderValue("DATE");
        }

        dateLabel.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        dateLabel.setForeground(new java.awt.Color(255, 255, 255));
        dateLabel.setText("DATE");

        showtimeComboBox.setBackground(new java.awt.Color(0, 0, 0));
        showtimeComboBox.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        showtimeComboBox.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout showtimeMainPanelLayout = new javax.swing.GroupLayout(showtimeMainPanel);
        showtimeMainPanel.setLayout(showtimeMainPanelLayout);
        showtimeMainPanelLayout.setHorizontalGroup(
            showtimeMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(showtimeMainPanelLayout.createSequentialGroup()
                .addContainerGap(51, Short.MAX_VALUE)
                .addGroup(showtimeMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, showtimeMainPanelLayout.createSequentialGroup()
                        .addGroup(showtimeMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(genericScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 770, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, showtimeMainPanelLayout.createSequentialGroup()
                                .addComponent(dateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(showtimeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(234, 234, 234)))
                        .addGap(48, 48, 48))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, showtimeMainPanelLayout.createSequentialGroup()
                        .addComponent(movieShowtimeLabel1)
                        .addGap(270, 270, 270))))
        );
        showtimeMainPanelLayout.setVerticalGroup(
            showtimeMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, showtimeMainPanelLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(movieShowtimeLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addGroup(showtimeMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(showtimeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addComponent(genericScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );

        ratingMainPanel.setBackground(new java.awt.Color(0, 0, 0));

        ratingrevieLabel.setBackground(new java.awt.Color(0, 0, 0));
        ratingrevieLabel.setFont(new java.awt.Font("Engravers MT", 1, 24)); // NOI18N
        ratingrevieLabel.setForeground(new java.awt.Color(255, 255, 255));
        ratingrevieLabel.setText("RATING AND REVIEWS");

        movienameField.setForeground(new java.awt.Color(204, 204, 204));
        movienameField.setText("MOVIE NAME");
        movienameField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                movienameFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                movienameFieldFocusLost(evt);
            }
        });

        reviewsLabel.setBackground(new java.awt.Color(0, 0, 0));
        reviewsLabel.setFont(new java.awt.Font("Engravers MT", 1, 18)); // NOI18N
        reviewsLabel.setForeground(new java.awt.Color(255, 255, 255));
        reviewsLabel.setText("REVIEWS");

        reviewsField.setForeground(new java.awt.Color(204, 204, 204));
        reviewsField.setText("REVIEWS");
        reviewsField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                reviewsFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                reviewsFieldFocusLost(evt);
            }
        });
        reviewsField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reviewsFieldActionPerformed(evt);
            }
        });

        ratingLabel1.setBackground(new java.awt.Color(0, 0, 0));
        ratingLabel1.setFont(new java.awt.Font("Engravers MT", 1, 18)); // NOI18N
        ratingLabel1.setForeground(new java.awt.Color(255, 255, 255));
        ratingLabel1.setText("RATING");

        ratingSpinner.setValue(1);
        ratingSpinner.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                ratingSpinnerPropertyChange(evt);
            }
        });

        submitreviewButton.setBackground(new java.awt.Color(204, 0, 0));
        submitreviewButton.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 18)); // NOI18N
        submitreviewButton.setForeground(new java.awt.Color(255, 255, 255));
        submitreviewButton.setText("FIND MOVIE");
        submitreviewButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                submitreviewButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                submitreviewButtonMouseExited(evt);
            }
        });
        submitreviewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitreviewButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ratingMainPanelLayout = new javax.swing.GroupLayout(ratingMainPanel);
        ratingMainPanel.setLayout(ratingMainPanelLayout);
        ratingMainPanelLayout.setHorizontalGroup(
            ratingMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ratingMainPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(ratingrevieLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(244, 244, 244))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ratingMainPanelLayout.createSequentialGroup()
                .addContainerGap(131, Short.MAX_VALUE)
                .addGroup(ratingMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ratingMainPanelLayout.createSequentialGroup()
                        .addGroup(ratingMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ratingMainPanelLayout.createSequentialGroup()
                                .addComponent(ratingLabel1)
                                .addGap(28, 28, 28)
                                .addComponent(ratingSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(178, 178, 178))
                            .addComponent(reviewsField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 628, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(ratingMainPanelLayout.createSequentialGroup()
                                .addGap(247, 247, 247)
                                .addComponent(reviewsLabel)
                                .addGap(269, 269, 269))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ratingMainPanelLayout.createSequentialGroup()
                                .addComponent(movienameField, javax.swing.GroupLayout.PREFERRED_SIZE, 421, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(111, 111, 111)))
                        .addGap(110, 110, 110))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ratingMainPanelLayout.createSequentialGroup()
                        .addComponent(submitreviewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 487, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(180, 180, 180))))
        );
        ratingMainPanelLayout.setVerticalGroup(
            ratingMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ratingMainPanelLayout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(ratingrevieLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(67, 67, 67)
                .addComponent(movienameField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(reviewsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(reviewsField, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(ratingMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ratingLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ratingSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 75, Short.MAX_VALUE)
                .addComponent(submitreviewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
        );

        historyMainPanel.setBackground(new java.awt.Color(0, 0, 0));

        ticketHistoryLabel.setFont(new java.awt.Font("Engravers MT", 1, 24)); // NOI18N
        ticketHistoryLabel.setForeground(new java.awt.Color(255, 255, 255));
        ticketHistoryLabel.setText("TICKET HISTORY");

        genericTable3.setBackground(new java.awt.Color(0, 0, 0));
        genericTable3.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        genericTable3.setForeground(new java.awt.Color(255, 255, 255));
        genericTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "TICKET ID", "MOVIE NAME", "DATE", "STATUS"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        genericTable3.setRowHeight(30);
        genericTable3.getTableHeader().setReorderingAllowed(false);
        genericScrollPane3.setViewportView(genericTable3);
        if (genericTable3.getColumnModel().getColumnCount() > 0) {
            genericTable3.getColumnModel().getColumn(0).setResizable(false);
            genericTable3.getColumnModel().getColumn(1).setResizable(false);
            genericTable3.getColumnModel().getColumn(2).setResizable(false);
            genericTable3.getColumnModel().getColumn(3).setResizable(false);
        }

        javax.swing.GroupLayout historyMainPanelLayout = new javax.swing.GroupLayout(historyMainPanel);
        historyMainPanel.setLayout(historyMainPanelLayout);
        historyMainPanelLayout.setHorizontalGroup(
            historyMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, historyMainPanelLayout.createSequentialGroup()
                .addContainerGap(294, Short.MAX_VALUE)
                .addComponent(ticketHistoryLabel)
                .addGap(290, 290, 290))
            .addGroup(historyMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(historyMainPanelLayout.createSequentialGroup()
                    .addGap(49, 49, 49)
                    .addComponent(genericScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 770, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(50, Short.MAX_VALUE)))
        );
        historyMainPanelLayout.setVerticalGroup(
            historyMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(historyMainPanelLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(ticketHistoryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(559, Short.MAX_VALUE))
            .addGroup(historyMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(historyMainPanelLayout.createSequentialGroup()
                    .addGap(141, 141, 141)
                    .addComponent(genericScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 476, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(23, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout leftsidePanelLayout = new javax.swing.GroupLayout(leftsidePanel);
        leftsidePanel.setLayout(leftsidePanelLayout);
        leftsidePanelLayout.setHorizontalGroup(
            leftsidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(movieMainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(leftsidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(profileMainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(leftsidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(showtimeMainPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(leftsidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(ratingMainPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(leftsidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(historyMainPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        leftsidePanelLayout.setVerticalGroup(
            leftsidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(movieMainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(leftsidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(profileMainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(leftsidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(showtimeMainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(leftsidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(ratingMainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(leftsidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(historyMainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(rightsidePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(leftsidePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(rightsidePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(leftsidePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void moviePanelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_moviePanelMouseEntered
        if (name != "moviePanel") {
            moviePanel.setBackground(new Color(0xF5F5F5));
            moviePanel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        }
    }//GEN-LAST:event_moviePanelMouseEntered

    private void moviePanelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_moviePanelMouseExited
        if (name != "moviePanel") {
            moviePanel.setBackground(Color.WHITE);
            moviePanel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        }
    }//GEN-LAST:event_moviePanelMouseExited

    private void movieLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_movieLabelMouseEntered
        if (name != "moviePanel") {
            moviePanel.setBackground(new Color(0xF5F5F5));
            moviePanel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        }
    }//GEN-LAST:event_movieLabelMouseEntered

    private void movieLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_movieLabelMouseExited
        if (name != "moviePanel") {
            moviePanel.setBackground(Color.WHITE);
            moviePanel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        }
    }//GEN-LAST:event_movieLabelMouseExited

    private void movieiconLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_movieiconLabelMouseEntered
        if (name != "moviePanel") {
            moviePanel.setBackground(new Color(0xF5F5F5));
            moviePanel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        }
    }//GEN-LAST:event_movieiconLabelMouseEntered

    private void movieiconLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_movieiconLabelMouseExited
        if (name != "moviePanel") {
            moviePanel.setBackground(Color.WHITE);
            moviePanel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        }
    }//GEN-LAST:event_movieiconLabelMouseExited

    private void profilePanelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_profilePanelMouseEntered
        if (name != "profilePanel") {
            profilePanel.setBackground(new Color(0xF5F5F5));
            profilePanel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        }
    }//GEN-LAST:event_profilePanelMouseEntered

    private void profilePanelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_profilePanelMouseExited
        if (name != "profilePanel") {
            profilePanel.setBackground(Color.WHITE);
            profilePanel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        }
    }//GEN-LAST:event_profilePanelMouseExited

    private void profileiconLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_profileiconLabelMouseEntered
        if (name != "profilePanel") {
            profilePanel.setBackground(new Color(0xF5F5F5));
            profilePanel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        }
    }//GEN-LAST:event_profileiconLabelMouseEntered

    private void profileiconLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_profileiconLabelMouseExited
        if (name != "profilePanel") {
            profilePanel.setBackground(Color.WHITE);
            profilePanel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        }
    }//GEN-LAST:event_profileiconLabelMouseExited

    private void profileLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_profileLabelMouseEntered
        if (name != "profilePanel") {
            profilePanel.setBackground(new Color(0xF5F5F5));
            profilePanel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        }
    }//GEN-LAST:event_profileLabelMouseEntered

    private void profileLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_profileLabelMouseExited
        if (name != "profilePanel") {
            profilePanel.setBackground(Color.WHITE);
            profilePanel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        }
    }//GEN-LAST:event_profileLabelMouseExited

    private void showtimePanelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showtimePanelMouseEntered
        if (name != "showtimePanel") {
            showtimePanel.setBackground(new Color(0xF5F5F5));
            showtimePanel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        }
    }//GEN-LAST:event_showtimePanelMouseEntered

    private void showtimePanelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showtimePanelMouseExited
        if (name != "showtimePanel") {
            showtimePanel.setBackground(Color.WHITE);
            showtimePanel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        }
    }//GEN-LAST:event_showtimePanelMouseExited

    private void showtimeLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showtimeLabelMouseEntered
        if (name != "showtimePanel") {
            showtimePanel.setBackground(new Color(0xF5F5F5));
            showtimePanel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        }
    }//GEN-LAST:event_showtimeLabelMouseEntered

    private void showtimeLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showtimeLabelMouseExited
        if (name != "showtimePanel") {
            showtimePanel.setBackground(Color.WHITE);
            showtimePanel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        }
    }//GEN-LAST:event_showtimeLabelMouseExited

    private void showtimeiconLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showtimeiconLabelMouseEntered
        if (name != "showtimePanel") {
            showtimePanel.setBackground(new Color(0xF5F5F5));
            showtimePanel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        }
    }//GEN-LAST:event_showtimeiconLabelMouseEntered

    private void showtimeiconLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showtimeiconLabelMouseExited
        if (name != "showtimePanel") {
            showtimePanel.setBackground(Color.WHITE);
            showtimePanel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        }
    }//GEN-LAST:event_showtimeiconLabelMouseExited

    private void ratingPanelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ratingPanelMouseEntered
        if (name != "ratingPanel") {
            ratingPanel.setBackground(new Color(0xF5F5F5));
            ratingPanel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        }
    }//GEN-LAST:event_ratingPanelMouseEntered

    private void ratingPanelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ratingPanelMouseExited
        if (name != "ratingPanel") {
            ratingPanel.setBackground(Color.WHITE);
            ratingPanel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        }
    }//GEN-LAST:event_ratingPanelMouseExited

    private void ratingLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ratingLabelMouseEntered
        if (name != "ratingPanel") {
            ratingPanel.setBackground(new Color(0xF5F5F5));
            ratingPanel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        }
    }//GEN-LAST:event_ratingLabelMouseEntered

    private void ratingLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ratingLabelMouseExited
        if (name != "ratingPanel") {
            ratingPanel.setBackground(Color.WHITE);
            ratingPanel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        }
    }//GEN-LAST:event_ratingLabelMouseExited

    private void ratingIconLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ratingIconLabelMouseEntered
        if (name != "ratingPanel") {
            ratingPanel.setBackground(new Color(0xF5F5F5));
            ratingPanel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        }
    }//GEN-LAST:event_ratingIconLabelMouseEntered

    private void ratingIconLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ratingIconLabelMouseExited
        if (name != "ratingPanel") {
            ratingPanel.setBackground(Color.WHITE);
            ratingPanel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        }
    }//GEN-LAST:event_ratingIconLabelMouseExited

    private void historyPanelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_historyPanelMouseEntered
        if (name != "historyPanel") {
            historyPanel.setBackground(new Color(0xF5F5F5));
            historyPanel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        }
    }//GEN-LAST:event_historyPanelMouseEntered

    private void historyPanelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_historyPanelMouseExited
        if (name != "historyPanel") {
            historyPanel.setBackground(Color.WHITE);
            historyPanel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        }
    }//GEN-LAST:event_historyPanelMouseExited

    private void historyLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_historyLabelMouseEntered
        if (name != "historyPanel") {
            historyPanel.setBackground(new Color(0xF5F5F5));
            historyPanel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        }
    }//GEN-LAST:event_historyLabelMouseEntered

    private void historyLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_historyLabelMouseExited
        if (name != "historyPanel") {
            historyPanel.setBackground(Color.WHITE);
            historyPanel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        }
    }//GEN-LAST:event_historyLabelMouseExited

    private void historyiconLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_historyiconLabelMouseEntered
        if (name != "historyPanel") {
            historyPanel.setBackground(new Color(0xF5F5F5));
            historyPanel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        }
    }//GEN-LAST:event_historyiconLabelMouseEntered

    private void historyiconLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_historyiconLabelMouseExited
        if (name != "historyPanel") {
            historyPanel.setBackground(Color.WHITE);
            historyPanel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        }
    }//GEN-LAST:event_historyiconLabelMouseExited

    private void logoutButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoutButtonMouseEntered
        logoutButton.setForeground(Color.BLACK);
        logoutButton.setBackground(Color.WHITE);
        logoutButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_logoutButtonMouseEntered

    private void logoutButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoutButtonMouseExited
        logoutButton.setForeground(Color.WHITE);
        logoutButton.setBackground(Color.RED);
        logoutButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_logoutButtonMouseExited

    private void moviePanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_moviePanelMouseClicked

        name = "moviePanel";

        moviePanel.setBackground(Color.red);
        profilePanel.setBackground(Color.WHITE);
        showtimePanel.setBackground(Color.WHITE);
        ratingPanel.setBackground(Color.WHITE);
        historyPanel.setBackground(Color.WHITE);

        movieMainPanel.setVisible(true);
        profileMainPanel.setVisible(false);
        showtimeMainPanel.setVisible(false);
        ratingMainPanel.setVisible(false);
        historyMainPanel.setVisible(false);

        moviescreeningLabel.setVisible(true);
        genericScrollPane1.setVisible(true);
        genericTable1.setVisible(true);

        genericTable1.getColumnModel().getColumn(0).setPreferredWidth(150);
        genericTable1.getColumnModel().getColumn(1).setPreferredWidth(130);
        searchmovieField.setVisible(true);

        dbconnection db = new dbconnection();
        String status = "Active";
        DefaultTableModel tblmodel = (DefaultTableModel) genericTable1.getModel();
        try {
            tblmodel.setRowCount(0);
            ResultSet rs = db.st.executeQuery("SELECT NAME, PRODUCTION_COMPANY, GENERE, LANGUAGE, DURATION, RELEASE_DATE FROM MOVIE WHERE STATUS = '" + status + "'");
            if (!rs.next()) {
                JOptionPane.showMessageDialog(this, "No Record Found");
            } else {

                String tbData1[] = {rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6)};
                tblmodel.addRow(tbData1);
                while (rs.next()) {
                    String tbData[] = {rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6)};
                    tblmodel.addRow(tbData);
                }
            }
        } catch (SQLException ex) {
            JFrame f = null;
            JOptionPane.showMessageDialog(f, "No Record Found", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_moviePanelMouseClicked

    private void movieLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_movieLabelMouseClicked

        name = "moviePanel";

        moviePanel.setBackground(Color.red);
        profilePanel.setBackground(Color.WHITE);
        showtimePanel.setBackground(Color.WHITE);
        ratingPanel.setBackground(Color.WHITE);
        historyPanel.setBackground(Color.WHITE);

        movieMainPanel.setVisible(true);
        profileMainPanel.setVisible(false);
        showtimeMainPanel.setVisible(false);
        ratingMainPanel.setVisible(false);
        historyMainPanel.setVisible(false);

        moviescreeningLabel.setVisible(true);
        genericScrollPane1.setVisible(true);
        genericTable1.setVisible(true);

        genericTable1.getColumnModel().getColumn(0).setPreferredWidth(150);
        genericTable1.getColumnModel().getColumn(1).setPreferredWidth(130);
        searchmovieField.setVisible(true);

        dbconnection db = new dbconnection();
        String status = "Active";
        DefaultTableModel tblmodel = (DefaultTableModel) genericTable1.getModel();
        try {
            tblmodel.setRowCount(0);
            ResultSet rs = db.st.executeQuery("SELECT NAME, PRODUCTION_COMPANY, GENERE, LANGUAGE, DURATION, RELEASE_DATE FROM MOVIE WHERE STATUS = '" + status + "'");
            if (!rs.next()) {
                JOptionPane.showMessageDialog(this, "No Record Found");
            } else {
                String tbData1[] = {rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6)};
                tblmodel.addRow(tbData1);
                while (rs.next()) {
                    String tbData[] = {rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6)};
                    tblmodel.addRow(tbData);
                }
            }
        } catch (SQLException ex) {
            JFrame f = null;
            JOptionPane.showMessageDialog(f, "No Record Found", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_movieLabelMouseClicked

    private void movieiconLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_movieiconLabelMouseClicked

        name = "moviePanel";

        moviePanel.setBackground(Color.red);
        profilePanel.setBackground(Color.WHITE);
        showtimePanel.setBackground(Color.WHITE);
        ratingPanel.setBackground(Color.WHITE);
        historyPanel.setBackground(Color.WHITE);

        movieMainPanel.setVisible(true);
        profileMainPanel.setVisible(false);
        showtimeMainPanel.setVisible(false);
        ratingMainPanel.setVisible(false);
        historyMainPanel.setVisible(false);

        moviescreeningLabel.setVisible(true);
        genericScrollPane1.setVisible(true);
        genericTable1.setVisible(true);

        genericTable1.getColumnModel().getColumn(0).setPreferredWidth(150);
        genericTable1.getColumnModel().getColumn(1).setPreferredWidth(130);

        searchmovieField.setVisible(true);

        dbconnection db = new dbconnection();
        String status = "Active";
        DefaultTableModel tblmodel = (DefaultTableModel) genericTable1.getModel();
        try {
            tblmodel.setRowCount(0);
            ResultSet rs = db.st.executeQuery("SELECT NAME, PRODUCTION_COMPANY, GENERE, LANGUAGE, DURATION, RELEASE_DATE FROM MOVIE WHERE STATUS = '" + status + "'");
            if (!rs.next()) {
                JOptionPane.showMessageDialog(this, "No Record Found");
            } else {
                String tbData1[] = {rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6)};
                tblmodel.addRow(tbData1);
                while (rs.next()) {
                    String tbData[] = {rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6)};
                    tblmodel.addRow(tbData);
                }
            }
        } catch (SQLException ex) {
            JFrame f = null;
            JOptionPane.showMessageDialog(f, "No Record Found", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_movieiconLabelMouseClicked

    private void profilePanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_profilePanelMouseClicked

        name = "profilePanel";

        moviePanel.setBackground(Color.WHITE);
        profilePanel.setBackground(Color.RED);
        showtimePanel.setBackground(Color.WHITE);
        ratingPanel.setBackground(Color.WHITE);
        historyPanel.setBackground(Color.WHITE);

        movieMainPanel.setVisible(false);
        profileMainPanel.setVisible(true);
        showtimeMainPanel.setVisible(false);
        ratingMainPanel.setVisible(false);
        historyMainPanel.setVisible(false);

        profileTitleLabel.setVisible(true);
        customerIDLabel.setVisible(true);
        nameLabel.setVisible(true);
        emailLabel.setVisible(true);
        phoneLabel.setVisible(true);
        addressLabel.setVisible(true);
        changePasswordLabel.setVisible(true);

        dbconnection db = new dbconnection();
        try {
            ResultSet rs = db.st.executeQuery("SELECT * FROM CUSTOMER WHERE CUSTOMER_ID = '" + id + "'");
            if (rs.next()) {
                customerIDLabel.setText(rs.getString(1));
                nameLabel.setText(rs.getString(2));
                emailLabel.setText(rs.getString(3));
                phoneLabel.setText(rs.getString(5));
            } else {
                JFrame f = null;
                JOptionPane.showMessageDialog(f, "No Record Found", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JFrame f = null;
            JOptionPane.showMessageDialog(f, "Error Occurred", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_profilePanelMouseClicked

    private void profileLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_profileLabelMouseClicked

        name = "profilePanel";

        moviePanel.setBackground(Color.WHITE);
        profilePanel.setBackground(Color.RED);
        showtimePanel.setBackground(Color.WHITE);
        ratingPanel.setBackground(Color.WHITE);
        historyPanel.setBackground(Color.WHITE);

        movieMainPanel.setVisible(false);
        profileMainPanel.setVisible(true);
        showtimeMainPanel.setVisible(false);
        ratingMainPanel.setVisible(false);
        historyMainPanel.setVisible(false);

        profileTitleLabel.setVisible(true);
        customerIDLabel.setVisible(true);
        nameLabel.setVisible(true);
        emailLabel.setVisible(true);
        phoneLabel.setVisible(true);
        addressLabel.setVisible(true);
        changePasswordLabel.setVisible(true);

        dbconnection db = new dbconnection();
        try {
            ResultSet rs = db.st.executeQuery("SELECT * FROM CUSTOMER WHERE CUSTOMER_ID = '" + id + "'");
            if (rs.next()) {
                customerIDLabel.setText(rs.getString(1));
                nameLabel.setText(rs.getString(2));
                emailLabel.setText(rs.getString(3));
                phoneLabel.setText(rs.getString(5));
            } else {
                JFrame f = null;
                JOptionPane.showMessageDialog(f, "No Record Found", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JFrame f = null;
            JOptionPane.showMessageDialog(f, "Error Occurred", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_profileLabelMouseClicked

    private void profileiconLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_profileiconLabelMouseClicked

        name = "profilePanel";

        moviePanel.setBackground(Color.WHITE);
        profilePanel.setBackground(Color.RED);
        showtimePanel.setBackground(Color.WHITE);
        ratingPanel.setBackground(Color.WHITE);
        historyPanel.setBackground(Color.WHITE);

        movieMainPanel.setVisible(false);
        profileMainPanel.setVisible(true);
        showtimeMainPanel.setVisible(false);
        ratingMainPanel.setVisible(false);
        historyMainPanel.setVisible(false);

        profileTitleLabel.setVisible(true);
        customerIDLabel.setVisible(true);
        nameLabel.setVisible(true);
        emailLabel.setVisible(true);
        phoneLabel.setVisible(true);
        addressLabel.setVisible(true);
        changePasswordLabel.setVisible(true);

        dbconnection db = new dbconnection();
        try {
            ResultSet rs = db.st.executeQuery("SELECT * FROM CUSTOMER WHERE CUSTOMER_ID = '" + id + "'");
            if (rs.next()) {
                customerIDLabel.setText(rs.getString(1));
                nameLabel.setText(rs.getString(2));
                emailLabel.setText(rs.getString(3));
                phoneLabel.setText(rs.getString(5));
            } else {
                JFrame f = null;
                JOptionPane.showMessageDialog(f, "No Record Found", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JFrame f = null;
            JOptionPane.showMessageDialog(f, "Error Occurred", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_profileiconLabelMouseClicked

    private void showtimePanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showtimePanelMouseClicked

        name = "showtimePanel";

        moviePanel.setBackground(Color.WHITE);
        profilePanel.setBackground(Color.WHITE);
        showtimePanel.setBackground(Color.RED);
        ratingPanel.setBackground(Color.WHITE);
        historyPanel.setBackground(Color.WHITE);

        movieMainPanel.setVisible(false);
        profileMainPanel.setVisible(false);
        showtimeMainPanel.setVisible(true);
        ratingMainPanel.setVisible(false);
        historyMainPanel.setVisible(false);

        movieShowtimeLabel1.setVisible(true);
        genericScrollPane2.setVisible(true);
        genericTable2.setVisible(true);
        dateLabel.setVisible(true);
        showtimeComboBox.setVisible(true);

        showtimeComboBox.setBackground(Color.BLACK);
        showtimeComboBox.setForeground(Color.WHITE);
        fillDateComboBox(showtimeComboBox);

        showtimeComboBox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Get the selected date from the combo box
                String selectedDate = (String) showtimeComboBox.getSelectedItem();

                // Run the query based on the selected date
                dbconnection db = new dbconnection();
                DefaultTableModel tblmodel = (DefaultTableModel) genericTable2.getModel();
                try {
                    tblmodel.setRowCount(0);
                    ResultSet rs = db.st.executeQuery("SELECT S.SHOWTIME_ID, M.NAME, S.HALL_ID, S.RESERVED_SEATS, S.AVAILABLE_SEATS, S.STARTTIME, S.ENDTIME, S.DATE FROM SHOWTIME S JOIN MOVIE M ON S.MOVIE_ID = M.MOVIE_ID AND S.DATE = '" + selectedDate + "'");
                    while (rs.next()) {
                        String tbData[] = {rs.getString("S.SHOWTIME_ID"), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8)};
                        tblmodel.addRow(tbData);
                        genericTable2.setAutoResizeMode(genericTable2.AUTO_RESIZE_ALL_COLUMNS);
                    }
                } catch (SQLException ex) {
                    JFrame f = null;
                    JOptionPane.showMessageDialog(f, "No data found", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        });
    }//GEN-LAST:event_showtimePanelMouseClicked

    private void showtimeLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showtimeLabelMouseClicked

        name = "showtimePanel";

        moviePanel.setBackground(Color.WHITE);
        profilePanel.setBackground(Color.WHITE);
        showtimePanel.setBackground(Color.RED);
        ratingPanel.setBackground(Color.WHITE);
        historyPanel.setBackground(Color.WHITE);

        movieMainPanel.setVisible(false);
        profileMainPanel.setVisible(false);
        showtimeMainPanel.setVisible(true);
        ratingMainPanel.setVisible(false);
        historyMainPanel.setVisible(false);

        movieShowtimeLabel1.setVisible(true);
        genericScrollPane2.setVisible(true);
        genericTable2.setVisible(true);
        dateLabel.setVisible(true);
        showtimeComboBox.setVisible(true);

        showtimeComboBox.setBackground(Color.BLACK);
        showtimeComboBox.setForeground(Color.WHITE);
        fillDateComboBox(showtimeComboBox);

        showtimeComboBox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Get the selected date from the combo box
                String selectedDate = (String) showtimeComboBox.getSelectedItem();

                // Run the query based on the selected date
                dbconnection db = new dbconnection();
                DefaultTableModel tblmodel = (DefaultTableModel) genericTable2.getModel();
                try {
                    tblmodel.setRowCount(0);
                    ResultSet rs = db.st.executeQuery("SELECT S.SHOWTIME_ID, M.NAME, S.HALL_ID, S.RESERVED_SEATS, S.AVAILABLE_SEATS, S.STARTTIME, S.ENDTIME, S.DATE FROM SHOWTIME S JOIN MOVIE M ON S.MOVIE_ID = M.MOVIE_ID AND S.DATE = '" + selectedDate + "'");
                    while (rs.next()) {
                        String tbData[] = {rs.getString("S.SHOWTIME_ID"), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8)};
                        tblmodel.addRow(tbData);
                        genericTable2.setAutoResizeMode(genericTable2.AUTO_RESIZE_ALL_COLUMNS);
                    }
                } catch (SQLException ex) {
                    JFrame f = null;
                    JOptionPane.showMessageDialog(f, "No data found", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        });
    }//GEN-LAST:event_showtimeLabelMouseClicked

    private void showtimeiconLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showtimeiconLabelMouseClicked

        name = "showtimePanel";

        moviePanel.setBackground(Color.WHITE);
        profilePanel.setBackground(Color.WHITE);
        showtimePanel.setBackground(Color.RED);
        ratingPanel.setBackground(Color.WHITE);
        historyPanel.setBackground(Color.WHITE);

        movieMainPanel.setVisible(false);
        profileMainPanel.setVisible(false);
        showtimeMainPanel.setVisible(true);
        ratingMainPanel.setVisible(false);
        historyMainPanel.setVisible(false);

        movieShowtimeLabel1.setVisible(true);
        genericScrollPane2.setVisible(true);
        genericTable2.setVisible(true);
        dateLabel.setVisible(true);
        showtimeComboBox.setVisible(true);

        showtimeComboBox.setBackground(Color.BLACK);
        showtimeComboBox.setForeground(Color.WHITE);
        fillDateComboBox(showtimeComboBox);

        showtimeComboBox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Get the selected date from the combo box
                String selectedDate = (String) showtimeComboBox.getSelectedItem();

                // Run the query based on the selected date
                dbconnection db = new dbconnection();
                DefaultTableModel tblmodel = (DefaultTableModel) genericTable2.getModel();
                try {
                    tblmodel.setRowCount(0);
                    ResultSet rs = db.st.executeQuery("SELECT S.SHOWTIME_ID, M.NAME, S.HALL_ID, S.RESERVED_SEATS, S.AVAILABLE_SEATS, S.STARTTIME, S.ENDTIME, S.DATE FROM SHOWTIME S JOIN MOVIE M ON S.MOVIE_ID = M.MOVIE_ID AND S.DATE = '" + selectedDate + "'");
                    while (rs.next()) {
                        String tbData[] = {rs.getString("S.SHOWTIME_ID"), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8)};
                        tblmodel.addRow(tbData);
                        genericTable2.setAutoResizeMode(genericTable2.AUTO_RESIZE_ALL_COLUMNS);
                    }
                } catch (SQLException ex) {
                    JFrame f = null;
                    JOptionPane.showMessageDialog(f, "No data found", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        });
    }//GEN-LAST:event_showtimeiconLabelMouseClicked

    private void ratingPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ratingPanelMouseClicked
        
        name = "ratingPanel";
        moviePanel.setBackground(Color.WHITE);
        profilePanel.setBackground(Color.WHITE);
        showtimePanel.setBackground(Color.WHITE);
        ratingPanel.setBackground(Color.RED);
        historyPanel.setBackground(Color.WHITE);

        movieMainPanel.setVisible(false);
        profileMainPanel.setVisible(false);
        showtimeMainPanel.setVisible(false);
        ratingMainPanel.setVisible(true);
        historyMainPanel.setVisible(false);

        movienameField.setVisible(true);
        submitreviewButton.setVisible(true);
        dbconnection db = new dbconnection();

        submitreviewButton.addActionListener((ActionEvent e) -> {
            if (movienameField.getText().trim().isEmpty() || movienameField.getText().equals("MOVIE ID")) {
                JFrame f = null;
                JOptionPane.showMessageDialog(f, "Fields are Empty!", "Alert", JOptionPane.ERROR_MESSAGE);
            } else {
                try {
                    boolean check = false;
                    String movieId = null;

                    ResultSet rs = db.st.executeQuery("SELECT M.movie_id, C.customer_id FROM MOVIE M JOIN TICKET T ON M.movie_id = T.movie_id JOIN CUSTOMER C ON T.customer_id = C.customer_id WHERE M.name = '" + movienameField.getText() + "' AND T.status = 'BOOKED' AND C.customer_id = '" + id + "' AND NOT EXISTS (SELECT 1 FROM MOVIE_REVIEWS MR WHERE MR.movie_id = M.movie_id AND MR.customer_id = C.customer_id )");

                    while (rs.next()) {
                        check = true;
                        movieId = rs.getString("movie_id");
                    }

                    if (check) {
                        reviewsLabel.setVisible(true);
                        ratingLabel1.setVisible(true);
                        reviewsField.setVisible(true);
                        ratingSpinner.setVisible(true);
                        movienameField.setEditable(false);
                        submitreviewButton.setText("SUBMIT");

                        ActionListener[] actionListeners = submitreviewButton.getActionListeners();
                        for (ActionListener listener : actionListeners) {
                            submitreviewButton.removeActionListener(listener);
                        }

                        final String finalMovieId = movieId; // to make it accessible inside the ActionListener

                        submitreviewButton.addActionListener((ActionEvent f) -> {
                            if (reviewsField.getText().trim().isEmpty() || reviewsField.getText().equals("REVIEWS")) {
                                JFrame f2 = null;
                                int value = (Integer) ratingSpinner.getValue();
                                if (value < 1 || value > 5) {
                                    JOptionPane.showMessageDialog(f2, "Provide Correct Rating", "Alert", JOptionPane.ERROR_MESSAGE);
                                } else {
                                    JOptionPane.showMessageDialog(f2, "Fields are Empty!", "Alert", JOptionPane.ERROR_MESSAGE);
                                }
                            } else {
                                boolean notexicute = true;
                                System.out.println(finalMovieId);
                                String sql = "INSERT INTO MOVIE_REVIEWS (MOVIE_ID, REVIEWS, RATING, CUSTOMER_ID) VALUES ('" + finalMovieId + "','" + reviewsField.getText() + "','" + ratingSpinner.getValue() + "','" + id + "')";
                                try {
                                    db.st.executeUpdate(sql);
                                    JFrame f1 = null;
                                    JOptionPane.showMessageDialog(f1, "Rating and Review Submitted Successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                                } catch (SQLException ex) {
                                    JFrame f2 = null;

                                    int value = (Integer) ratingSpinner.getValue();
                                    if (value < 1 || value > 5) {
                                        JOptionPane.showMessageDialog(f2, "Provide Correct Rating", "Alert", JOptionPane.ERROR_MESSAGE);
                                        notexicute = false;
                                    }
                                    if(notexicute == true)
                                    JOptionPane.showMessageDialog(f2, "You have already given a review for this movie", "Alert", JOptionPane.ERROR_MESSAGE);
                                }
                            }
                        });
                    } else {
                        JFrame f = null;
                        JOptionPane.showMessageDialog(f, "Movie Not Watched", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (SQLException ex) {
                    JFrame f = null;
                    JOptionPane.showMessageDialog(f, "Movie Not Watched", "Error", JOptionPane.ERROR_MESSAGE);

                }
            }
        });

    }//GEN-LAST:event_ratingPanelMouseClicked

    private void ratingLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ratingLabelMouseClicked

        name = "ratingPanel";

        moviePanel.setBackground(Color.WHITE);
        profilePanel.setBackground(Color.WHITE);
        showtimePanel.setBackground(Color.WHITE);
        ratingPanel.setBackground(Color.RED);
        historyPanel.setBackground(Color.WHITE);

        movieMainPanel.setVisible(false);
        profileMainPanel.setVisible(false);
        showtimeMainPanel.setVisible(false);
        ratingMainPanel.setVisible(true);
        historyMainPanel.setVisible(false);

        movienameField.setVisible(true);
        submitreviewButton.setVisible(true);
        dbconnection db = new dbconnection();

        submitreviewButton.addActionListener((ActionEvent e) -> {
            if (movienameField.getText().trim().isEmpty() || movienameField.getText().equals("MOVIE ID")) {
                JFrame f = null;
                JOptionPane.showMessageDialog(f, "Fields are Empty!", "Alert", JOptionPane.ERROR_MESSAGE);
            } else {
                try {
                    boolean check = false;
                    String movieId = null;

                    ResultSet rs = db.st.executeQuery("SELECT M.movie_id, C.customer_id FROM MOVIE M JOIN TICKET T ON M.movie_id = T.movie_id JOIN CUSTOMER C ON T.customer_id = C.customer_id WHERE M.name = '" + movienameField.getText() + "' AND T.status = 'BOOKED' AND C.customer_id = '" + id + "' AND NOT EXISTS (SELECT 1 FROM MOVIE_REVIEWS MR WHERE MR.movie_id = M.movie_id AND MR.customer_id = C.customer_id )");

                    while (rs.next()) {
                        check = true;
                        movieId = rs.getString("movie_id");
                    }

                    if (check) {
                        reviewsLabel.setVisible(true);
                        ratingLabel1.setVisible(true);
                        reviewsField.setVisible(true);
                        ratingSpinner.setVisible(true);
                        movienameField.setEditable(false);
                        submitreviewButton.setText("SUBMIT");

                        ActionListener[] actionListeners = submitreviewButton.getActionListeners();
                        for (ActionListener listener : actionListeners) {
                            submitreviewButton.removeActionListener(listener);
                        }

                        final String finalMovieId = movieId; // to make it accessible inside the ActionListener

                        submitreviewButton.addActionListener((ActionEvent f) -> {
                            if (reviewsField.getText().trim().isEmpty() || reviewsField.getText().equals("REVIEWS")) {
                                JFrame f2 = null;
                                int value = (Integer) ratingSpinner.getValue();
                                if (value < 1 || value > 5) {
                                    JOptionPane.showMessageDialog(f2, "Provide Correct Rating", "Alert", JOptionPane.ERROR_MESSAGE);
                                } else {
                                    JOptionPane.showMessageDialog(f2, "Fields are Empty!", "Alert", JOptionPane.ERROR_MESSAGE);
                                }
                            } else {
                                System.out.println(finalMovieId);
                                String sql = "INSERT INTO MOVIE_REVIEWS (MOVIE_ID, REVIEWS, RATING, CUSTOMER_ID) VALUES ('" + finalMovieId + "','" + reviewsField.getText() + "','" + ratingSpinner.getValue() + "','" + id + "')";
                                try {
                                    db.st.executeUpdate(sql);
                                    JFrame f1 = null;
                                    JOptionPane.showMessageDialog(f1, "Rating and Review Submitted Successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                                } catch (SQLException ex) {
                                    ex.printStackTrace();
                                    JFrame f2 = null;
                                    JOptionPane.showMessageDialog(f2, "You have already given a review for this movie", "Alert", JOptionPane.ERROR_MESSAGE);
                                }
                            }
                        });
                    } else {
                        JFrame f = null;
                        JOptionPane.showMessageDialog(f, "Movie Not Watched", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
            }
        });
    }//GEN-LAST:event_ratingLabelMouseClicked

    private void ratingIconLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ratingIconLabelMouseClicked

        name = "ratingPanel";

        moviePanel.setBackground(Color.WHITE);
        profilePanel.setBackground(Color.WHITE);
        showtimePanel.setBackground(Color.WHITE);
        ratingPanel.setBackground(Color.RED);
        historyPanel.setBackground(Color.WHITE);

        movieMainPanel.setVisible(false);
        profileMainPanel.setVisible(false);
        showtimeMainPanel.setVisible(false);
        ratingMainPanel.setVisible(true);
        historyMainPanel.setVisible(false);

        movienameField.setVisible(true);
        submitreviewButton.setVisible(true);
        dbconnection db = new dbconnection();

        submitreviewButton.addActionListener((ActionEvent e) -> {
            if (movienameField.getText().trim().isEmpty() || movienameField.getText().equals("MOVIE ID")) {
                JFrame f = null;
                JOptionPane.showMessageDialog(f, "Fields are Empty!", "Alert", JOptionPane.ERROR_MESSAGE);
            } else {
                try {
                    boolean check = false;
                    String movieId = null;

                    ResultSet rs = db.st.executeQuery("SELECT M.movie_id, C.customer_id FROM MOVIE M JOIN TICKET T ON M.movie_id = T.movie_id JOIN CUSTOMER C ON T.customer_id = C.customer_id WHERE M.name = '" + movienameField.getText() + "' AND T.status = 'BOOKED' AND C.customer_id = '" + id + "' AND NOT EXISTS (SELECT 1 FROM MOVIE_REVIEWS MR WHERE MR.movie_id = M.movie_id AND MR.customer_id = C.customer_id )");

                    while (rs.next()) {
                        check = true;
                        movieId = rs.getString("movie_id");
                    }

                    if (check) {
                        reviewsLabel.setVisible(true);
                        ratingLabel1.setVisible(true);
                        reviewsField.setVisible(true);
                        ratingSpinner.setVisible(true);
                        movienameField.setEditable(false);
                        submitreviewButton.setText("SUBMIT");

                        ActionListener[] actionListeners = submitreviewButton.getActionListeners();
                        for (ActionListener listener : actionListeners) {
                            submitreviewButton.removeActionListener(listener);
                        }

                        final String finalMovieId = movieId; // to make it accessible inside the ActionListener

                        submitreviewButton.addActionListener((ActionEvent f) -> {
                            if (reviewsField.getText().trim().isEmpty() || reviewsField.getText().equals("REVIEWS")) {
                                JFrame f2 = null;
                                int value = (Integer) ratingSpinner.getValue();
                                if (value < 1 || value > 5) {
                                    JOptionPane.showMessageDialog(f2, "Provide Correct Rating", "Alert", JOptionPane.ERROR_MESSAGE);
                                } else {
                                    JOptionPane.showMessageDialog(f2, "Fields are Empty!", "Alert", JOptionPane.ERROR_MESSAGE);
                                }
                            } else {
                                System.out.println(finalMovieId);
                                String sql = "INSERT INTO MOVIE_REVIEWS (MOVIE_ID, REVIEWS, RATING, CUSTOMER_ID) VALUES ('" + finalMovieId + "','" + reviewsField.getText() + "','" + ratingSpinner.getValue() + "','" + id + "')";
                                try {
                                    db.st.executeUpdate(sql);
                                    JFrame f1 = null;
                                    JOptionPane.showMessageDialog(f1, "Rating and Review Submitted Successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                                } catch (SQLException ex) {
                                    JFrame f2 = null;
                                    JOptionPane.showMessageDialog(f2, "You have already given a review for this movie", "Alert", JOptionPane.ERROR_MESSAGE);
                                    ex.printStackTrace();
                                }
                            }
                        });
                    } else {
                        JFrame f = null;
                        JOptionPane.showMessageDialog(f, "Movie Not Watched", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
            }
        });
    }//GEN-LAST:event_ratingIconLabelMouseClicked

    private void historyPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_historyPanelMouseClicked

        name = "historyPanel";

        moviePanel.setBackground(Color.WHITE);
        profilePanel.setBackground(Color.WHITE);
        showtimePanel.setBackground(Color.WHITE);
        ratingPanel.setBackground(Color.WHITE);
        historyPanel.setBackground(Color.RED);

        movieMainPanel.setVisible(false);
        profileMainPanel.setVisible(false);
        showtimeMainPanel.setVisible(false);
        ratingMainPanel.setVisible(false);
        historyMainPanel.setVisible(true);

        ticketHistoryLabel.setVisible(true);
        genericScrollPane3.setVisible(true);
        genericTable3.setVisible(true);

        dbconnection db = new dbconnection();
        DefaultTableModel tblmodel = (DefaultTableModel) genericTable3.getModel();
        try {
            tblmodel.setRowCount(0);
            System.out.println(id);
            ResultSet rs = db.st.executeQuery("SELECT t.TICKET_ID, m.NAME AS MOVIE_NAME, s.DATE AS SHOWTIME_DATE, t.STATUS FROM TICKET t JOIN SHOWTIME s ON t.SHOWTIME_ID = s.SHOWTIME_ID JOIN MOVIE m ON t.MOVIE_ID = m.MOVIE_ID WHERE t.CUSTOMER_ID ='" + id + "'");
            if (!rs.next()) {
                JOptionPane.showMessageDialog(this, "No Record Found");
            } else {
                String tbData1[] = {rs.getString("TICKET_ID"), rs.getString("MOVIE_NAME"), rs.getString("SHOWTIME_DATE"), rs.getString("STATUS")};
                tblmodel.addRow(tbData1);
                while (rs.next()) {
                    String tbData[] = {rs.getString("TICKET_ID"), rs.getString("MOVIE_NAME"), rs.getString("SHOWTIME_DATE"), rs.getString("STATUS")};
                    tblmodel.addRow(tbData);
                }
            }
        } catch (SQLException ex) {
            JFrame f = null;
            ex.printStackTrace();
            JOptionPane.showMessageDialog(f, "No Record Found", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_historyPanelMouseClicked

    private void historyLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_historyLabelMouseClicked

        name = "historyPanel";

        moviePanel.setBackground(Color.WHITE);
        profilePanel.setBackground(Color.WHITE);
        showtimePanel.setBackground(Color.WHITE);
        ratingPanel.setBackground(Color.WHITE);
        historyPanel.setBackground(Color.RED);

        movieMainPanel.setVisible(false);
        profileMainPanel.setVisible(false);
        showtimeMainPanel.setVisible(false);
        ratingMainPanel.setVisible(false);
        historyMainPanel.setVisible(true);

        ticketHistoryLabel.setVisible(true);
        genericScrollPane3.setVisible(true);
        genericTable3.setVisible(true);

        dbconnection db = new dbconnection();
        DefaultTableModel tblmodel = (DefaultTableModel) genericTable3.getModel();
        try {
            tblmodel.setRowCount(0);
            System.out.println(id);
            ResultSet rs = db.st.executeQuery("SELECT t.TICKET_ID, m.NAME AS MOVIE_NAME, s.DATE AS SHOWTIME_DATE, t.STATUS FROM TICKET t JOIN SHOWTIME s ON t.SHOWTIME_ID = s.SHOWTIME_ID JOIN MOVIE m ON t.MOVIE_ID = m.MOVIE_ID WHERE t.CUSTOMER_ID ='" + id + "'");
            if (!rs.next()) {
                JOptionPane.showMessageDialog(this, "No Record Found");
            } else {
                String tbData1[] = {rs.getString("TICKET_ID"), rs.getString("MOVIE_NAME"), rs.getString("SHOWTIME_DATE"), rs.getString("STATUS")};
                tblmodel.addRow(tbData1);
                while (rs.next()) {
                    String tbData[] = {rs.getString("TICKET_ID"), rs.getString("MOVIE_NAME"), rs.getString("SHOWTIME_DATE"), rs.getString("STATUS")};
                    tblmodel.addRow(tbData);
                }
            }
        } catch (SQLException ex) {
            JFrame f = null;
            ex.printStackTrace();
            JOptionPane.showMessageDialog(f, "No Record Found", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_historyLabelMouseClicked

    private void historyiconLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_historyiconLabelMouseClicked

        name = "historyPanel";

        moviePanel.setBackground(Color.WHITE);
        profilePanel.setBackground(Color.WHITE);
        showtimePanel.setBackground(Color.WHITE);
        ratingPanel.setBackground(Color.WHITE);
        historyPanel.setBackground(Color.RED);

        movieMainPanel.setVisible(false);
        profileMainPanel.setVisible(false);
        showtimeMainPanel.setVisible(false);
        ratingMainPanel.setVisible(false);
        historyMainPanel.setVisible(true);

        ticketHistoryLabel.setVisible(true);
        genericScrollPane3.setVisible(true);
        genericTable3.setVisible(true);

        dbconnection db = new dbconnection();
        DefaultTableModel tblmodel = (DefaultTableModel) genericTable3.getModel();
        try {
            tblmodel.setRowCount(0);
            System.out.println(id);
            ResultSet rs = db.st.executeQuery("SELECT t.TICKET_ID, m.NAME AS MOVIE_NAME, s.DATE AS SHOWTIME_DATE, t.STATUS FROM TICKET t JOIN SHOWTIME s ON t.SHOWTIME_ID = s.SHOWTIME_ID JOIN MOVIE m ON t.MOVIE_ID = m.MOVIE_ID WHERE t.CUSTOMER_ID ='" + id + "'");
            if (!rs.next()) {
                JOptionPane.showMessageDialog(this, "No Record Found");
            } else {
                String tbData1[] = {rs.getString("TICKET_ID"), rs.getString("MOVIE_NAME"), rs.getString("SHOWTIME_DATE"), rs.getString("STATUS")};
                tblmodel.addRow(tbData1);
                while (rs.next()) {
                    String tbData[] = {rs.getString("TICKET_ID"), rs.getString("MOVIE_NAME"), rs.getString("SHOWTIME_DATE"), rs.getString("STATUS")};
                    tblmodel.addRow(tbData);
                }
            }
        } catch (SQLException ex) {
            JFrame f = null;
            ex.printStackTrace();
            JOptionPane.showMessageDialog(f, "No Record Found", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_historyiconLabelMouseClicked

    private void moviePanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_moviePanelMousePressed

    }//GEN-LAST:event_moviePanelMousePressed

    private void movieLabelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_movieLabelMousePressed

    }//GEN-LAST:event_movieLabelMousePressed

    private void movieiconLabelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_movieiconLabelMousePressed

    }//GEN-LAST:event_movieiconLabelMousePressed

    private void moviePanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_moviePanelMouseReleased

    }//GEN-LAST:event_moviePanelMouseReleased

    private void logoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutButtonActionPerformed
        dispose();
        loginPage obj = new loginPage();
        obj.setVisible(true);
    }//GEN-LAST:event_logoutButtonActionPerformed

    private void movienameFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_movienameFieldFocusGained
        if (movienameField.getText().equals("MOVIE NAME")) {
            setPromptText(movienameField, null);
        }
    }//GEN-LAST:event_movienameFieldFocusGained

    private void movienameFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_movienameFieldFocusLost
        if (movienameField.getText().trim().isEmpty()) {
            setPromptText(movienameField, "MOVIE NAME");
        }
    }//GEN-LAST:event_movienameFieldFocusLost

    private void reviewsFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_reviewsFieldFocusGained
        if (reviewsField.getText().equals("REVIEWS")) {
            setPromptText(reviewsField, null);
        }
    }//GEN-LAST:event_reviewsFieldFocusGained

    private void reviewsFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_reviewsFieldFocusLost
        if (reviewsField.getText().trim().isEmpty()) {
            setPromptText(reviewsField, "REVIEWS");
        }
    }//GEN-LAST:event_reviewsFieldFocusLost

    private void ratingSpinnerPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_ratingSpinnerPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_ratingSpinnerPropertyChange

    private void submitreviewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitreviewButtonActionPerformed

    }//GEN-LAST:event_submitreviewButtonActionPerformed

    private void reviewsFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reviewsFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_reviewsFieldActionPerformed

    private void changePasswordLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_changePasswordLabelMouseEntered
        changePasswordLabel.setForeground(Color.RED);
        changePasswordLabel.setBackground(Color.WHITE);
        changePasswordLabel.setCursor(new Cursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_changePasswordLabelMouseEntered

    private void changePasswordLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_changePasswordLabelMouseExited
        changePasswordLabel.setForeground(Color.WHITE);
        changePasswordLabel.setBackground(Color.BLACK);
        changePasswordLabel.setCursor(new Cursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_changePasswordLabelMouseExited

    private void changePasswordLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_changePasswordLabelMouseClicked
        changePassTextField.setVisible(true);
        changePassButton.setVisible(true);
    }//GEN-LAST:event_changePasswordLabelMouseClicked

    private void changePassTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_changePassTextFieldFocusGained
        if (changePassTextField.getText().equals("New Password")) {
            setPromptText(changePassTextField, null);
        }
    }//GEN-LAST:event_changePassTextFieldFocusGained

    private void changePassTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_changePassTextFieldFocusLost
        if (changePassTextField.getText().trim().isEmpty()) {
            setPromptText(changePassTextField, "New Password");
        }
    }//GEN-LAST:event_changePassTextFieldFocusLost

    private void changePassButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_changePassButtonMouseEntered
        changePassButton.setForeground(Color.BLACK);
        changePassButton.setBackground(Color.WHITE);
        changePassButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_changePassButtonMouseEntered

    private void changePassButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_changePassButtonMouseExited
        changePassButton.setForeground(Color.WHITE);
        changePassButton.setBackground(Color.RED);
        changePassButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_changePassButtonMouseExited

    private void changePassButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_changePassButtonMouseClicked

    }//GEN-LAST:event_changePassButtonMouseClicked

    private void changePassButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changePassButtonActionPerformed
        if (changePassTextField.getText().isEmpty() || changePassTextField.getText().equals("New Password")) {
            JOptionPane.showMessageDialog(this, "Password Field Empty");
        } else {
            boolean hasUppercase = false;
            boolean hasSpecialChar = false;

            for (char ch : changePassTextField.getText().toCharArray()) {
                if (Character.isUpperCase(ch)) {
                    hasUppercase = true;
                }
                if ("!@#$%^&*()".contains(String.valueOf(ch))) {
                    hasSpecialChar = true;
                }
            }
            if (changePassTextField.getText().length() == 8 && (hasUppercase || hasSpecialChar)) {
                dbconnection db = new dbconnection();
                try {
                    int count = db.st.executeUpdate("UPDATE CUSTOMER SET PASSWORD = '" + changePassTextField.getText() + "' WHERE CUSTOMER_ID = '" + id + "'");
                    if (count == 1) {
                        JOptionPane.showMessageDialog(this, "Password Changed Successfully");
                        changePassTextField.setVisible(false);
                        changePassButton.setVisible(false);
                    } else {
                        JOptionPane.showMessageDialog(this, "Error Contact Quantum Cinema");
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Error Contact Quantum Cinema", "Error", JOptionPane.ERROR_MESSAGE);
                    changePassTextField.setVisible(false);
                    changePassButton.setVisible(false);
                }
            } else {
                JFrame f = null;
                JOptionPane.showMessageDialog(f, "Password in Wrong Format", "Error", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_changePassButtonActionPerformed

    private void searchmovieFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchmovieFieldFocusGained
        if (searchmovieField.getText().equals("Search Movie")) {
            setPromptText(searchmovieField, null);
        }
    }//GEN-LAST:event_searchmovieFieldFocusGained

    private void searchmovieFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchmovieFieldFocusLost
        if (searchmovieField.getText().trim().isEmpty()) {
            setPromptText(searchmovieField, "Search Movie");
        }
    }//GEN-LAST:event_searchmovieFieldFocusLost

    private void searchmovieFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchmovieFieldKeyPressed
        DefaultTableModel tblmodel = (DefaultTableModel) genericTable1.getModel();
        searchmovieField.setVisible(true);
        if (searchmovieField.getText().trim().isEmpty()) {
            dbconnection db = new dbconnection();
            String status = "Active";
            try {
                tblmodel.setRowCount(0);
                ResultSet rs = db.st.executeQuery("SELECT NAME, PRODUCTION_COMPANY, GENERE, LANGUAGE, DURATION, RELEASE_DATE FROM MOVIE WHERE STATUS = '" + status + "'");
                if (!rs.next()) {

                } else {

                    String tbData1[] = {rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6)};
                    tblmodel.addRow(tbData1);
                    while (rs.next()) {
                        String tbData[] = {rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6)};
                        tblmodel.addRow(tbData);
                    }
                }
            } catch (SQLException ex) {
            }
        } else {
            dbconnection db = new dbconnection();
            String status = "Active";
            try {
                tblmodel.setRowCount(0);
                ResultSet rs = db.st.executeQuery("SELECT NAME, PRODUCTION_COMPANY, GENERE, LANGUAGE, DURATION, RELEASE_DATE FROM MOVIE WHERE STATUS = '" + status + "' AND NAME LIKE '" + searchmovieField.getText() + "%'");
                if (!rs.next()) {
                } else {
                    String tbData1[] = {rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6)};
                    tblmodel.addRow(tbData1);
                    while (rs.next()) {
                        String tbData[] = {rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6)};
                        tblmodel.addRow(tbData);
                    }
                }
            } catch (SQLException ex) {
            }
        }
    }//GEN-LAST:event_searchmovieFieldKeyPressed

    private void searchmovieFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchmovieFieldKeyReleased
        DefaultTableModel tblmodel = (DefaultTableModel) genericTable1.getModel();
        searchmovieField.setVisible(true);
        if (searchmovieField.getText().trim().isEmpty()) {
            dbconnection db = new dbconnection();
            String status = "Active";
            try {
                tblmodel.setRowCount(0);
                ResultSet rs = db.st.executeQuery("SELECT NAME, PRODUCTION_COMPANY, GENERE, LANGUAGE, DURATION, RELEASE_DATE FROM MOVIE WHERE STATUS = '" + status + "'");
                if (!rs.next()) {
                } else {

                    String tbData1[] = {rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6)};
                    tblmodel.addRow(tbData1);
                    while (rs.next()) {
                        String tbData[] = {rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6)};
                        tblmodel.addRow(tbData);
                    }
                }
            } catch (SQLException ex) {
            }
        } else {
            dbconnection db = new dbconnection();
            String status = "Active";
            try {
                tblmodel.setRowCount(0);
                ResultSet rs = db.st.executeQuery("SELECT NAME, PRODUCTION_COMPANY, GENERE, LANGUAGE, DURATION, RELEASE_DATE FROM MOVIE WHERE STATUS = '" + status + "' AND NAME LIKE '" + searchmovieField.getText() + "%'");
                if (!rs.next()) {
                } else {
                    String tbData1[] = {rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6)};
                    tblmodel.addRow(tbData1);
                    while (rs.next()) {
                        String tbData[] = {rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6)};
                        tblmodel.addRow(tbData);
                    }
                }
            } catch (SQLException ex) {
            }
        }
    }//GEN-LAST:event_searchmovieFieldKeyReleased

    private void submitreviewButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_submitreviewButtonMouseEntered
        submitreviewButton.setForeground(Color.BLACK);
        submitreviewButton.setBackground(Color.WHITE);
        submitreviewButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_submitreviewButtonMouseEntered

    private void submitreviewButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_submitreviewButtonMouseExited
        submitreviewButton.setForeground(Color.WHITE);
        submitreviewButton.setBackground(Color.RED);
        submitreviewButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_submitreviewButtonMouseExited

    private static void setPromptText(JTextField textField, String prompt) {
        textField.setForeground(prompt == null ? Color.BLACK : Color.GRAY);
        textField.setText(prompt);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(customerDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(customerDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(customerDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(customerDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new customerDashboard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Title;
    private javax.swing.JPanel UserIDPanel;
    private javax.swing.JLabel addressLabel;
    private javax.swing.JButton changePassButton;
    private javax.swing.JTextField changePassTextField;
    private javax.swing.JLabel changePasswordLabel;
    private javax.swing.JLabel customerIDLabel;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JScrollPane genericScrollPane1;
    private javax.swing.JScrollPane genericScrollPane2;
    private javax.swing.JScrollPane genericScrollPane3;
    private javax.swing.JTable genericTable1;
    private javax.swing.JTable genericTable2;
    private javax.swing.JTable genericTable3;
    private javax.swing.JLabel historyLabel;
    private javax.swing.JPanel historyMainPanel;
    private javax.swing.JPanel historyPanel;
    private javax.swing.JLabel historyiconLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel leftsidePanel;
    private javax.swing.JButton logoutButton;
    private javax.swing.JLabel movieLabel;
    private javax.swing.JPanel movieMainPanel;
    private javax.swing.JPanel moviePanel;
    private javax.swing.JLabel movieShowtimeLabel1;
    private javax.swing.JLabel movieiconLabel;
    private javax.swing.JTextField movienameField;
    private javax.swing.JLabel moviescreeningLabel;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JLabel phoneLabel;
    private javax.swing.JLabel profileLabel;
    private javax.swing.JPanel profileMainPanel;
    private javax.swing.JPanel profilePanel;
    private javax.swing.JLabel profileTitleLabel;
    private javax.swing.JLabel profileiconLabel;
    private javax.swing.JLabel ratingIconLabel;
    private javax.swing.JLabel ratingLabel;
    private javax.swing.JLabel ratingLabel1;
    private javax.swing.JPanel ratingMainPanel;
    private javax.swing.JPanel ratingPanel;
    private javax.swing.JSpinner ratingSpinner;
    private javax.swing.JLabel ratingrevieLabel;
    private javax.swing.JTextField reviewsField;
    private javax.swing.JLabel reviewsLabel;
    private javax.swing.JPanel rightsidePanel;
    private javax.swing.JTextField searchmovieField;
    private javax.swing.JComboBox<String> showtimeComboBox;
    private javax.swing.JLabel showtimeLabel;
    private javax.swing.JPanel showtimeMainPanel;
    private javax.swing.JPanel showtimePanel;
    private javax.swing.JLabel showtimeiconLabel;
    private javax.swing.JButton submitreviewButton;
    private javax.swing.JLabel ticketHistoryLabel;
    private javax.swing.JLabel userIDLabel;
    // End of variables declaration//GEN-END:variables
}
